# -*- coding: utf-8 -*-
"""DoAnThDeep.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XFKvbzPvJRkYGj0q_UvLMyutDGF_d3d2
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder, MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Input, LSTM, Dropout, Dense
from tensorflow.keras.callbacks import EarlyStopping
import matplotlib.pyplot as plt

# ======= 1. Đọc và xử lý dữ liệu ==========
train_df = pd.read_csv('train.csv', low_memory=False)
store_df = pd.read_csv('store.csv')

# Gộp dữ liệu theo Store
df = pd.merge(train_df, store_df, on='Store', how='left')

# Chuyển kiểu ngày tháng
df['Date'] = pd.to_datetime(df['Date'])

# Lọc ra các cửa hàng đang mở và có Sales > 0
df = df[(df['Open'] == 1) & (df['Sales'] > 0)]

# Mã hóa các cột phân loại
categorical_cols = ['StateHoliday', 'StoreType', 'Assortment']
for col in categorical_cols:
    df[col] = LabelEncoder().fit_transform(df[col].astype(str))

# Thêm đặc trưng thời gian
df['DayOfWeek'] = df['Date'].dt.dayofweek
df['Month'] = df['Date'].dt.month
df['Year'] = df['Date'].dt.year

# Các đặc trưng đầu vào
features = ['Sales', 'Promo', 'StateHoliday', 'SchoolHoliday',
            'StoreType', 'Assortment', 'DayOfWeek', 'Month', 'Year']

# Chuẩn hóa các đặc trưng
scaler = MinMaxScaler()
df[features] = scaler.fit_transform(df[features])
# Lưu lại scaler
joblib.dump(scaler, 'scaler.pkl')
# ======= 2. Tạo chuỗi thời gian cho nhiều cửa hàng ==========
def create_sequences(df, store_col='Store', time_step=14):
    X, y = [], []
    for store_id in df[store_col].unique():
        store_data = df[df[store_col] == store_id].sort_values('Date')
        values = store_data[features].values
        for i in range(len(values) - time_step):
            X.append(values[i:i+time_step])
            y.append(values[i+time_step][0])  # Giá trị Sales sau chuẩn hóa
    return np.array(X), np.array(y)

time_step = 14
X, y = create_sequences(df, time_step=time_step)

# ======= 3. Xây dựng mô hình LSTM ==========
model = Sequential([
    Input(shape=(time_step, len(features))),
    LSTM(64, return_sequences=True),
    Dropout(0.2),
    LSTM(32),
    Dropout(0.2),
    Dense(1)
])

model.compile(optimizer='adam', loss='mse', metrics=['mae'])
model.summary()

# ======= 4. Huấn luyện mô hình ==========
early_stop = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)

history = model.fit(X, y,
                    epochs=50,
                    batch_size=64,
                    validation_split=0.1,
                    callbacks=[early_stop],
                    verbose=1)

# ======= 5. Vẽ biểu đồ Loss ==========
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Val Loss')
plt.xlabel("Epoch")
plt.ylabel("Loss")
plt.title('Biểu đồ Loss trong quá trình huấn luyện')
plt.legend()
plt.show()

# ======= 6. Lưu mô hình ==========
model.save('rnn_sales_allstores_model.h5')
print("model.h5")

import joblib
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder
import tensorflow as tf

# Load test and store data
test_df = pd.read_csv('test.csv', low_memory=False)
store_df = pd.read_csv('store.csv')

# Load the scaler
scaler = joblib.load('scaler.pkl')

# Merge and preprocess
test_df = pd.merge(test_df, store_df, on='Store', how='left')
test_df['Date'] = pd.to_datetime(test_df['Date'])
test_df['Open'] = test_df['Open'].fillna(1).astype(int)
test_df_open = test_df[test_df['Open'] == 1].copy()

# Encode categorical columns
categorical_cols = ['StateHoliday', 'StoreType', 'Assortment']
for col in categorical_cols:
    test_df_open[col] = LabelEncoder().fit_transform(test_df_open[col].astype(str))

# Add time features
test_df_open['DayOfWeek'] = test_df_open['Date'].dt.dayofweek
test_df_open['Month'] = test_df_open['Date'].dt.month
test_df_open['Year'] = test_df_open['Date'].dt.year

# Define input features (9 cột đã dùng lúc huấn luyện)
input_features = ['Sales', 'Promo', 'StateHoliday', 'SchoolHoliday',
                  'StoreType', 'Assortment', 'DayOfWeek', 'Month', 'Year']

# Add fake Sales column (0.0) for scaling
test_df_open['Sales'] = 0.0

# Scale toàn bộ 9 features
scaled_all = scaler.transform(test_df_open[input_features])
scaled_df = pd.DataFrame(scaled_all, columns=input_features)
test_df_open[input_features] = scaled_df[input_features]

# Create test sequences
def create_test_sequences(df, store_col='Store', time_step=14):
    X_test, dates, store_ids = [], [], []
    for store_id in df[store_col].unique():
        store_data = df[df[store_col] == store_id].sort_values('Date')
        values = store_data[input_features].values
        if len(values) >= time_step:
            X_test.append(values[-time_step:])
            dates.append(store_data['Date'].iloc[-1])
            store_ids.append(store_id)
    return np.array(X_test), np.array(dates), np.array(store_ids)

# Set time_step (must match training)
time_step = 14
X_test, test_dates, test_store_ids = create_test_sequences(test_df_open, time_step=time_step)

# Load the trained model
model = tf.keras.models.load_model('rnn_sales_allstores_model.h5', compile=False)

# Predict
predicted_sales = model.predict(X_test).flatten()

# Inverse transform để đưa về giá trị thực
dummy_array = np.zeros((len(predicted_sales), len(input_features)))
dummy_array[:, 0] = predicted_sales  # predicted_sales đang ở dạng scale
predicted_sales_actual = scaler.inverse_transform(dummy_array)[:, 0]

# Tạo DataFrame kết quả
results = pd.DataFrame({
    'Store': test_store_ids,
    'Date': test_dates,
    'Predicted_Sales': predicted_sales_actual
})

print(results.head())

# (Tuỳ chọn) Xuất file kết quả nếu cần
# results.to_csv('predicted_sales.csv', index=False)

import pandas as pd
from sklearn.preprocessing import MinMaxScaler, LabelEncoder

# Đọc lại dữ liệu huấn luyện
train_df = pd.read_csv('train.csv', low_memory=False)
store_df = pd.read_csv('store.csv')

# Gộp dữ liệu và xử lý giống như lúc huấn luyện
df = pd.merge(train_df, store_df, on='Store', how='left')
df['Date'] = pd.to_datetime(df['Date'])
df = df[(df['Open'] == 1) & (df['Sales'] > 0)]

categorical_cols = ['StateHoliday', 'StoreType', 'Assortment']
for col in categorical_cols:
    df[col] = LabelEncoder().fit_transform(df[col].astype(str))

df['DayOfWeek'] = df['Date'].dt.dayofweek
df['Month'] = df['Date'].dt.month
df['Year'] = df['Date'].dt.year

# Các cột đặc trưng
features = ['Sales', 'Promo', 'StateHoliday', 'SchoolHoliday',
            'StoreType', 'Assortment', 'DayOfWeek', 'Month', 'Year']

# Fit lại scaler
scaler = MinMaxScaler()
scaler.fit(df[features])
import joblib
joblib.dump(scaler, 'scaler.pkl')