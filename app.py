import streamlit as st
import joblib
import pandas as pd
import numpy as np
from tensorflow.keras.models import load_model

st.set_page_config(page_title="D·ª± ƒëo√°n doanh s·ªë", layout="centered")

# Load scaler v√† m√¥ h√¨nh
scaler = joblib.load("scaler.pkl")  # scaler ph·∫£i fit tr√™n t·∫≠p c√≥ c·ªôt 'Sales'
model = load_model("model.h5", compile=False)

st.title("üìä D·ª± ƒëo√°n doanh s·ªë b√°n h√†ng (RNN - v·ªõi d·ªØ li·ªáu 14 ng√†y g·∫ßn nh·∫•t)")

uploaded_file = st.file_uploader("üìÅ T·∫£i l√™n file CSV ch·ª©a d·ªØ li·ªáu b√°n h√†ng", type=["csv"])

if uploaded_file is not None:
    try:
        df = pd.read_csv(uploaded_file)

        # Ki·ªÉm tra c·ªôt Date
        if 'Date' not in df.columns:
            st.error("‚ùå File ph·∫£i ch·ª©a c·ªôt 'Date'.")
        else:
            # Chuy·ªÉn c·ªôt Date v·ªÅ datetime
            df['Date'] = pd.to_datetime(df['Date'])

            # S·∫Øp x·∫øp theo ng√†y tƒÉng d·∫ßn
            df = df.sort_values('Date')

            # L·∫•y 14 ng√†y g·∫ßn nh·∫•t (theo gi√° tr·ªã duy nh·∫•t c·ªßa ng√†y)
            unique_dates = df['Date'].dt.normalize().unique()
            if len(unique_dates) < 14:
                st.error("‚ùå D·ªØ li·ªáu ph·∫£i ch·ª©a √≠t nh·∫•t 14 ng√†y kh√°c nhau.")
            else:
                last_14_days = unique_dates[-14:]

                # L·ªçc d·ªØ li·ªáu t∆∞∆°ng ·ª©ng
                df_14 = df[df['Date'].dt.normalize().isin(last_14_days)]

                # Ki·ªÉm tra ƒë·ªß 14 ng√†y
                if df_14['Date'].dt.normalize().nunique() != 14:
                    st.error("‚ùå D·ªØ li·ªáu kh√¥ng ƒë·ªß 14 ng√†y li√™n ti·∫øp.")
                else:
                    # X√≥a c·ªôt Date n·∫øu kh√¥ng n·∫±m trong features
                    if 'Date' in df_14.columns:
                        df_14 = df_14.drop(columns=['Date'])

                    # Scale d·ªØ li·ªáu
                    df_scaled = scaler.transform(df_14)

                    # Reshape cho RNN
                    df_scaled = df_scaled.reshape(1, 14, df_scaled.shape[1])

                    # D·ª± ƒëo√°n
                    pred = model.predict(df_scaled)

                    # Inverse transform
                    inverse_input = np.zeros((1, df_14.shape[1]))
                    inverse_input[0, 0] = pred[0][0]  # gi·∫£ ƒë·ªãnh c·ªôt Sales l√† ƒë·∫ßu ti√™n

                    original = scaler.inverse_transform(inverse_input)
                    original_sales = original[0][0]

                    st.success(f"üí∞ Doanh s·ªë th·ª±c t·∫ø ∆∞·ªõc t√≠nh: {original_sales:,.2f} $")

    except Exception as e:
        st.error(f"‚ö†Ô∏è L·ªói khi x·ª≠ l√Ω file: {str(e)}")
